import {
  require_jquery
} from "./chunk-7LFTRKDJ.js";
import {
  __commonJS
} from "./chunk-TFWDKVI3.js";

// node_modules/jquery-mask-plugin/dist/jquery.mask.min.js
var require_jquery_mask_min = __commonJS({
  "node_modules/jquery-mask-plugin/dist/jquery.mask.min.js"(exports, module) {
    var $jscomp = $jscomp || {};
    $jscomp.scope = {};
    $jscomp.findInternal = function(a, n, f) {
      a instanceof String && (a = String(a));
      for (var p = a.length, k = 0; k < p; k++) {
        var b = a[k];
        if (n.call(f, b, k, a))
          return { i: k, v: b };
      }
      return { i: -1, v: void 0 };
    };
    $jscomp.ASSUME_ES5 = false;
    $jscomp.ASSUME_NO_NATIVE_MAP = false;
    $jscomp.ASSUME_NO_NATIVE_SET = false;
    $jscomp.SIMPLE_FROUND_POLYFILL = false;
    $jscomp.defineProperty = $jscomp.ASSUME_ES5 || "function" == typeof Object.defineProperties ? Object.defineProperty : function(a, n, f) {
      a != Array.prototype && a != Object.prototype && (a[n] = f.value);
    };
    $jscomp.getGlobal = function(a) {
      return "undefined" != typeof window && window === a ? a : "undefined" != typeof global && null != global ? global : a;
    };
    $jscomp.global = $jscomp.getGlobal(exports);
    $jscomp.polyfill = function(a, n, f, p) {
      if (n) {
        f = $jscomp.global;
        a = a.split(".");
        for (p = 0; p < a.length - 1; p++) {
          var k = a[p];
          k in f || (f[k] = {});
          f = f[k];
        }
        a = a[a.length - 1];
        p = f[a];
        n = n(p);
        n != p && null != n && $jscomp.defineProperty(f, a, { configurable: true, writable: true, value: n });
      }
    };
    $jscomp.polyfill("Array.prototype.find", function(a) {
      return a ? a : function(a2, f) {
        return $jscomp.findInternal(this, a2, f).v;
      };
    }, "es6", "es3");
    (function(a, n, f) {
      "function" === typeof define && define.amd ? define(["jquery"], a) : "object" === typeof exports && "undefined" === typeof Meteor ? module.exports = a(require_jquery()) : a(n || f);
    })(function(a) {
      var n = function(b, d, e) {
        var c = { invalid: [], getCaret: function() {
          try {
            var a2 = 0, r = b.get(0), h = document.selection, d2 = r.selectionStart;
            if (h && -1 === navigator.appVersion.indexOf("MSIE 10")) {
              var e2 = h.createRange();
              e2.moveStart("character", -c.val().length);
              a2 = e2.text.length;
            } else if (d2 || "0" === d2)
              a2 = d2;
            return a2;
          } catch (C) {
          }
        }, setCaret: function(a2) {
          try {
            if (b.is(":focus")) {
              var c2 = b.get(0);
              if (c2.setSelectionRange)
                c2.setSelectionRange(a2, a2);
              else {
                var g = c2.createTextRange();
                g.collapse(true);
                g.moveEnd("character", a2);
                g.moveStart("character", a2);
                g.select();
              }
            }
          } catch (B) {
          }
        }, events: function() {
          b.on("keydown.mask", function(a2) {
            b.data("mask-keycode", a2.keyCode || a2.which);
            b.data("mask-previus-value", b.val());
            b.data("mask-previus-caret-pos", c.getCaret());
            c.maskDigitPosMapOld = c.maskDigitPosMap;
          }).on(a.jMaskGlobals.useInput ? "input.mask" : "keyup.mask", c.behaviour).on("paste.mask drop.mask", function() {
            setTimeout(
              function() {
                b.keydown().keyup();
              },
              100
            );
          }).on("change.mask", function() {
            b.data("changed", true);
          }).on("blur.mask", function() {
            f2 === c.val() || b.data("changed") || b.trigger("change");
            b.data("changed", false);
          }).on("blur.mask", function() {
            f2 = c.val();
          }).on("focus.mask", function(b2) {
            true === e.selectOnFocus && a(b2.target).select();
          }).on("focusout.mask", function() {
            e.clearIfNotMatch && !k2.test(c.val()) && c.val("");
          });
        }, getRegexMask: function() {
          for (var a2 = [], b2, c2, e2, t, f3 = 0; f3 < d.length; f3++)
            (b2 = l.translation[d.charAt(f3)]) ? (c2 = b2.pattern.toString().replace(/.{1}$|^.{1}/g, ""), e2 = b2.optional, (b2 = b2.recursive) ? (a2.push(d.charAt(f3)), t = { digit: d.charAt(f3), pattern: c2 }) : a2.push(e2 || b2 ? c2 + "?" : c2)) : a2.push(d.charAt(f3).replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"));
          a2 = a2.join("");
          t && (a2 = a2.replace(new RegExp("(" + t.digit + "(.*" + t.digit + ")?)"), "($1)?").replace(new RegExp(t.digit, "g"), t.pattern));
          return new RegExp(a2);
        }, destroyEvents: function() {
          b.off("input keydown keyup paste drop blur focusout ".split(" ").join(".mask "));
        }, val: function(a2) {
          var c2 = b.is("input") ? "val" : "text";
          if (0 < arguments.length) {
            if (b[c2]() !== a2)
              b[c2](a2);
            c2 = b;
          } else
            c2 = b[c2]();
          return c2;
        }, calculateCaretPosition: function(a2) {
          var d2 = c.getMasked(), h = c.getCaret();
          if (a2 !== d2) {
            var e2 = b.data("mask-previus-caret-pos") || 0;
            d2 = d2.length;
            var g = a2.length, f3 = a2 = 0, l2 = 0, k3 = 0, m;
            for (m = h; m < d2 && c.maskDigitPosMap[m]; m++)
              f3++;
            for (m = h - 1; 0 <= m && c.maskDigitPosMap[m]; m--)
              a2++;
            for (m = h - 1; 0 <= m; m--)
              c.maskDigitPosMap[m] && l2++;
            for (m = e2 - 1; 0 <= m; m--)
              c.maskDigitPosMapOld[m] && k3++;
            h > g ? h = 10 * d2 : e2 >= h && e2 !== g ? c.maskDigitPosMapOld[h] || (e2 = h, h = h - (k3 - l2) - a2, c.maskDigitPosMap[h] && (h = e2)) : h > e2 && (h = h + (l2 - k3) + f3);
          }
          return h;
        }, behaviour: function(d2) {
          d2 = d2 || window.event;
          c.invalid = [];
          var e2 = b.data("mask-keycode");
          if (-1 === a.inArray(e2, l.byPassKeys)) {
            e2 = c.getMasked();
            var h = c.getCaret(), g = b.data("mask-previus-value") || "";
            setTimeout(function() {
              c.setCaret(c.calculateCaretPosition(g));
            }, a.jMaskGlobals.keyStrokeCompensation);
            c.val(e2);
            c.setCaret(h);
            return c.callbacks(d2);
          }
        }, getMasked: function(a2, b2) {
          var h = [], f3 = void 0 === b2 ? c.val() : b2 + "", g = 0, k3 = d.length, n2 = 0, p2 = f3.length, m = 1, r = "push", u = -1, w = 0;
          b2 = [];
          if (e.reverse) {
            r = "unshift";
            m = -1;
            var x = 0;
            g = k3 - 1;
            n2 = p2 - 1;
            var A = function() {
              return -1 < g && -1 < n2;
            };
          } else
            x = k3 - 1, A = function() {
              return g < k3 && n2 < p2;
            };
          for (var z; A(); ) {
            var y = d.charAt(g), v = f3.charAt(n2), q = l.translation[y];
            if (q)
              v.match(q.pattern) ? (h[r](v), q.recursive && (-1 === u ? u = g : g === x && g !== u && (g = u - m), x === u && (g -= m)), g += m) : v === z ? (w--, z = void 0) : q.optional ? (g += m, n2 -= m) : q.fallback ? (h[r](q.fallback), g += m, n2 -= m) : c.invalid.push({ p: n2, v, e: q.pattern }), n2 += m;
            else {
              if (!a2)
                h[r](y);
              v === y ? (b2.push(n2), n2 += m) : (z = y, b2.push(n2 + w), w++);
              g += m;
            }
          }
          a2 = d.charAt(x);
          k3 !== p2 + 1 || l.translation[a2] || h.push(a2);
          h = h.join("");
          c.mapMaskdigitPositions(
            h,
            b2,
            p2
          );
          return h;
        }, mapMaskdigitPositions: function(a2, b2, d2) {
          a2 = e.reverse ? a2.length - d2 : 0;
          c.maskDigitPosMap = {};
          for (d2 = 0; d2 < b2.length; d2++)
            c.maskDigitPosMap[b2[d2] + a2] = 1;
        }, callbacks: function(a2) {
          var g = c.val(), h = g !== f2, k3 = [g, a2, b, e], l2 = function(a3, b2, c2) {
            "function" === typeof e[a3] && b2 && e[a3].apply(this, c2);
          };
          l2("onChange", true === h, k3);
          l2("onKeyPress", true === h, k3);
          l2("onComplete", g.length === d.length, k3);
          l2("onInvalid", 0 < c.invalid.length, [g, a2, b, c.invalid, e]);
        } };
        b = a(b);
        var l = this, f2 = c.val(), k2;
        d = "function" === typeof d ? d(c.val(), void 0, b, e) : d;
        l.mask = d;
        l.options = e;
        l.remove = function() {
          var a2 = c.getCaret();
          l.options.placeholder && b.removeAttr("placeholder");
          b.data("mask-maxlength") && b.removeAttr("maxlength");
          c.destroyEvents();
          c.val(l.getCleanVal());
          c.setCaret(a2);
          return b;
        };
        l.getCleanVal = function() {
          return c.getMasked(true);
        };
        l.getMaskedVal = function(a2) {
          return c.getMasked(false, a2);
        };
        l.init = function(g) {
          g = g || false;
          e = e || {};
          l.clearIfNotMatch = a.jMaskGlobals.clearIfNotMatch;
          l.byPassKeys = a.jMaskGlobals.byPassKeys;
          l.translation = a.extend({}, a.jMaskGlobals.translation, e.translation);
          l = a.extend(true, {}, l, e);
          k2 = c.getRegexMask();
          if (g)
            c.events(), c.val(c.getMasked());
          else {
            e.placeholder && b.attr("placeholder", e.placeholder);
            b.data("mask") && b.attr("autocomplete", "off");
            g = 0;
            for (var f3 = true; g < d.length; g++) {
              var h = l.translation[d.charAt(g)];
              if (h && h.recursive) {
                f3 = false;
                break;
              }
            }
            f3 && b.attr("maxlength", d.length).data("mask-maxlength", true);
            c.destroyEvents();
            c.events();
            g = c.getCaret();
            c.val(c.getMasked());
            c.setCaret(g);
          }
        };
        l.init(!b.is("input"));
      };
      a.maskWatchers = {};
      var f = function() {
        var b = a(this), d = {}, e = b.attr("data-mask");
        b.attr("data-mask-reverse") && (d.reverse = true);
        b.attr("data-mask-clearifnotmatch") && (d.clearIfNotMatch = true);
        "true" === b.attr("data-mask-selectonfocus") && (d.selectOnFocus = true);
        if (p(b, e, d))
          return b.data("mask", new n(this, e, d));
      }, p = function(b, d, e) {
        e = e || {};
        var c = a(b).data("mask"), f2 = JSON.stringify;
        b = a(b).val() || a(b).text();
        try {
          return "function" === typeof d && (d = d(b)), "object" !== typeof c || f2(c.options) !== f2(e) || c.mask !== d;
        } catch (w) {
        }
      }, k = function(a2) {
        var b = document.createElement("div");
        a2 = "on" + a2;
        var e = a2 in b;
        e || (b.setAttribute(
          a2,
          "return;"
        ), e = "function" === typeof b[a2]);
        return e;
      };
      a.fn.mask = function(b, d) {
        d = d || {};
        var e = this.selector, c = a.jMaskGlobals, f2 = c.watchInterval;
        c = d.watchInputs || c.watchInputs;
        var k2 = function() {
          if (p(this, b, d))
            return a(this).data("mask", new n(this, b, d));
        };
        a(this).each(k2);
        e && "" !== e && c && (clearInterval(a.maskWatchers[e]), a.maskWatchers[e] = setInterval(function() {
          a(document).find(e).each(k2);
        }, f2));
        return this;
      };
      a.fn.masked = function(a2) {
        return this.data("mask").getMaskedVal(a2);
      };
      a.fn.unmask = function() {
        clearInterval(a.maskWatchers[this.selector]);
        delete a.maskWatchers[this.selector];
        return this.each(function() {
          var b = a(this).data("mask");
          b && b.remove().removeData("mask");
        });
      };
      a.fn.cleanVal = function() {
        return this.data("mask").getCleanVal();
      };
      a.applyDataMask = function(b) {
        b = b || a.jMaskGlobals.maskElements;
        (b instanceof a ? b : a(b)).filter(a.jMaskGlobals.dataMaskAttr).each(f);
      };
      k = { maskElements: "input,td,span,div", dataMaskAttr: "*[data-mask]", dataMask: true, watchInterval: 300, watchInputs: true, keyStrokeCompensation: 10, useInput: !/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent) && k("input"), watchDataMask: false, byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91], translation: { 0: { pattern: /\d/ }, 9: { pattern: /\d/, optional: true }, "#": { pattern: /\d/, recursive: true }, A: { pattern: /[a-zA-Z0-9]/ }, S: { pattern: /[a-zA-Z]/ } } };
      a.jMaskGlobals = a.jMaskGlobals || {};
      k = a.jMaskGlobals = a.extend(true, {}, k, a.jMaskGlobals);
      k.dataMask && a.applyDataMask();
      setInterval(function() {
        a.jMaskGlobals.watchDataMask && a.applyDataMask();
      }, k.watchInterval);
    }, window.jQuery, window.Zepto);
  }
});
export default require_jquery_mask_min();
//# sourceMappingURL=jquery-mask-plugin_dist_jquery__mask__min__js.js.map
