import {
  require_jquery
} from "./chunk-7LFTRKDJ.js";
import {
  __commonJS
} from "./chunk-TFWDKVI3.js";

// node_modules/ion-rangeslider/js/ion.rangeSlider.min.js
var require_ion_rangeSlider_min = __commonJS({
  "node_modules/ion-rangeslider/js/ion.rangeSlider.min.js"(exports) {
    !function(i) {
      "undefined" != typeof jQuery && jQuery || "function" != typeof define || !define.amd ? "undefined" != typeof jQuery && jQuery || "object" != typeof exports ? i(jQuery, document, window, navigator) : i(require_jquery(), document, window, navigator) : define(["jquery"], function(t) {
        return i(t, document, window, navigator);
      });
    }(function(a, c, l, t, _) {
      "use strict";
      var i, s, o = 0, e = (i = t.userAgent, s = /msie\s\d+/i, 0 < i.search(s) && s.exec(i).toString().split(" ")[1] < 9 && (a("html").addClass("lt-ie9"), true));
      Function.prototype.bind || (Function.prototype.bind = function(o2) {
        var e2 = this, h2 = [].slice;
        if ("function" != typeof e2)
          throw new TypeError();
        var r = h2.call(arguments, 1), n = function() {
          if (this instanceof n) {
            var t2 = function() {
            };
            t2.prototype = e2.prototype;
            var i2 = new t2(), s2 = e2.apply(i2, r.concat(h2.call(arguments)));
            return Object(s2) === s2 ? s2 : i2;
          }
          return e2.apply(o2, r.concat(h2.call(arguments)));
        };
        return n;
      }), Array.prototype.indexOf || (Array.prototype.indexOf = function(t2, i2) {
        var s2;
        if (null == this)
          throw new TypeError('"this" is null or not defined');
        var o2 = Object(this), e2 = o2.length >>> 0;
        if (0 == e2)
          return -1;
        var h2 = +i2 || 0;
        if (Math.abs(h2) === 1 / 0 && (h2 = 0), e2 <= h2)
          return -1;
        for (s2 = Math.max(0 <= h2 ? h2 : e2 - Math.abs(h2), 0); s2 < e2; ) {
          if (s2 in o2 && o2[s2] === t2)
            return s2;
          s2++;
        }
        return -1;
      });
      function h(t2, i2, s2) {
        this.VERSION = "2.3.1", this.input = t2, this.plugin_count = s2, this.current_plugin = 0, this.calc_count = 0, this.update_tm = 0, this.old_from = 0, this.old_to = 0, this.old_min_interval = null, this.raf_id = null, this.dragging = false, this.force_redraw = false, this.no_diapason = false, this.has_tab_index = true, this.is_key = false, this.is_update = false, this.is_start = true, this.is_finish = false, this.is_active = false, this.is_resize = false, this.is_click = false, i2 = i2 || {}, this.$cache = { win: a(l), body: a(c.body), input: a(t2), cont: null, rs: null, min: null, max: null, from: null, to: null, single: null, bar: null, line: null, s_single: null, s_from: null, s_to: null, shad_single: null, shad_from: null, shad_to: null, edge: null, grid: null, grid_labels: [] }, this.coords = { x_gap: 0, x_pointer: 0, w_rs: 0, w_rs_old: 0, w_handle: 0, p_gap: 0, p_gap_left: 0, p_gap_right: 0, p_step: 0, p_pointer: 0, p_handle: 0, p_single_fake: 0, p_single_real: 0, p_from_fake: 0, p_from_real: 0, p_to_fake: 0, p_to_real: 0, p_bar_x: 0, p_bar_w: 0, grid_gap: 0, big_num: 0, big: [], big_w: [], big_p: [], big_x: [] }, this.labels = { w_min: 0, w_max: 0, w_from: 0, w_to: 0, w_single: 0, p_min: 0, p_max: 0, p_from_fake: 0, p_from_left: 0, p_to_fake: 0, p_to_left: 0, p_single_fake: 0, p_single_left: 0 };
        var o2, e2, h2, r = this.$cache.input, n = r.prop("value");
        for (h2 in o2 = { skin: "flat", type: "single", min: 10, max: 100, from: null, to: null, step: 1, min_interval: 0, max_interval: 0, drag_interval: false, values: [], p_values: [], from_fixed: false, from_min: null, from_max: null, from_shadow: false, to_fixed: false, to_min: null, to_max: null, to_shadow: false, prettify_enabled: true, prettify_separator: " ", prettify: null, force_edges: false, keyboard: true, grid: false, grid_margin: true, grid_num: 4, grid_snap: false, hide_min_max: false, hide_from_to: false, prefix: "", postfix: "", max_postfix: "", decorate_both: true, values_separator: " â€” ", input_values_separator: ";", disable: false, block: false, extra_classes: "", scope: null, onStart: null, onChange: null, onFinish: null, onUpdate: null }, "INPUT" !== r[0].nodeName && console && console.warn && console.warn("Base element should be <input>!", r[0]), (e2 = { skin: r.data("skin"), type: r.data("type"), min: r.data("min"), max: r.data("max"), from: r.data("from"), to: r.data("to"), step: r.data("step"), min_interval: r.data("minInterval"), max_interval: r.data("maxInterval"), drag_interval: r.data("dragInterval"), values: r.data("values"), from_fixed: r.data("fromFixed"), from_min: r.data("fromMin"), from_max: r.data("fromMax"), from_shadow: r.data("fromShadow"), to_fixed: r.data("toFixed"), to_min: r.data("toMin"), to_max: r.data("toMax"), to_shadow: r.data("toShadow"), prettify_enabled: r.data("prettifyEnabled"), prettify_separator: r.data("prettifySeparator"), force_edges: r.data("forceEdges"), keyboard: r.data("keyboard"), grid: r.data("grid"), grid_margin: r.data("gridMargin"), grid_num: r.data("gridNum"), grid_snap: r.data("gridSnap"), hide_min_max: r.data("hideMinMax"), hide_from_to: r.data("hideFromTo"), prefix: r.data("prefix"), postfix: r.data("postfix"), max_postfix: r.data("maxPostfix"), decorate_both: r.data("decorateBoth"), values_separator: r.data("valuesSeparator"), input_values_separator: r.data("inputValuesSeparator"), disable: r.data("disable"), block: r.data("block"), extra_classes: r.data("extraClasses") }).values = e2.values && e2.values.split(","), e2)
          e2.hasOwnProperty(h2) && (e2[h2] !== _ && "" !== e2[h2] || delete e2[h2]);
        n !== _ && "" !== n && ((n = n.split(e2.input_values_separator || i2.input_values_separator || ";"))[0] && n[0] == +n[0] && (n[0] = +n[0]), n[1] && n[1] == +n[1] && (n[1] = +n[1]), i2 && i2.values && i2.values.length ? (o2.from = n[0] && i2.values.indexOf(n[0]), o2.to = n[1] && i2.values.indexOf(n[1])) : (o2.from = n[0] && +n[0], o2.to = n[1] && +n[1])), a.extend(o2, i2), a.extend(o2, e2), this.options = o2, this.update_check = {}, this.validate(), this.result = { input: this.$cache.input, slider: null, min: this.options.min, max: this.options.max, from: this.options.from, from_percent: 0, from_value: null, to: this.options.to, to_percent: 0, to_value: null }, this.init();
      }
      h.prototype = { init: function(t2) {
        this.no_diapason = false, this.coords.p_step = this.convertToPercent(this.options.step, true), this.target = "base", this.toggleInput(), this.append(), this.setMinMax(), t2 ? (this.force_redraw = true, this.calc(true), this.callOnUpdate()) : (this.force_redraw = true, this.calc(true), this.callOnStart()), this.updateScene();
      }, append: function() {
        var t2 = '<span class="irs irs--' + this.options.skin + " js-irs-" + this.plugin_count + " " + this.options.extra_classes + '"></span>';
        this.$cache.input.before(t2), this.$cache.input.prop("readonly", true), this.$cache.cont = this.$cache.input.prev(), this.result.slider = this.$cache.cont, this.$cache.cont.html('<span class="irs"><span class="irs-line" tabindex="0"></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span>'), this.$cache.rs = this.$cache.cont.find(".irs"), this.$cache.min = this.$cache.cont.find(".irs-min"), this.$cache.max = this.$cache.cont.find(".irs-max"), this.$cache.from = this.$cache.cont.find(".irs-from"), this.$cache.to = this.$cache.cont.find(".irs-to"), this.$cache.single = this.$cache.cont.find(".irs-single"), this.$cache.line = this.$cache.cont.find(".irs-line"), this.$cache.grid = this.$cache.cont.find(".irs-grid"), "single" === this.options.type ? (this.$cache.cont.append('<span class="irs-bar irs-bar--single"></span><span class="irs-shadow shadow-single"></span><span class="irs-handle single"><i></i><i></i><i></i></span>'), this.$cache.bar = this.$cache.cont.find(".irs-bar"), this.$cache.edge = this.$cache.cont.find(".irs-bar-edge"), this.$cache.s_single = this.$cache.cont.find(".single"), this.$cache.from[0].style.visibility = "hidden", this.$cache.to[0].style.visibility = "hidden", this.$cache.shad_single = this.$cache.cont.find(".shadow-single")) : (this.$cache.cont.append('<span class="irs-bar"></span><span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-handle from"><i></i><i></i><i></i></span><span class="irs-handle to"><i></i><i></i><i></i></span>'), this.$cache.bar = this.$cache.cont.find(".irs-bar"), this.$cache.s_from = this.$cache.cont.find(".from"), this.$cache.s_to = this.$cache.cont.find(".to"), this.$cache.shad_from = this.$cache.cont.find(".shadow-from"), this.$cache.shad_to = this.$cache.cont.find(".shadow-to"), this.setTopHandler()), this.options.hide_from_to && (this.$cache.from[0].style.display = "none", this.$cache.to[0].style.display = "none", this.$cache.single[0].style.display = "none"), this.appendGrid(), this.options.disable ? (this.appendDisableMask(), this.$cache.input[0].disabled = true) : (this.$cache.input[0].disabled = false, this.removeDisableMask(), this.bindEvents()), this.options.disable || (this.options.block ? this.appendDisableMask() : this.removeDisableMask()), this.options.drag_interval && (this.$cache.bar[0].style.cursor = "ew-resize");
      }, setTopHandler: function() {
        var t2 = this.options.min, i2 = this.options.max, s2 = this.options.from, o2 = this.options.to;
        t2 < s2 && o2 === i2 ? this.$cache.s_from.addClass("type_last") : o2 < i2 && this.$cache.s_to.addClass("type_last");
      }, changeLevel: function(t2) {
        switch (t2) {
          case "single":
            this.coords.p_gap = this.toFixed(this.coords.p_pointer - this.coords.p_single_fake), this.$cache.s_single.addClass("state_hover");
            break;
          case "from":
            this.coords.p_gap = this.toFixed(this.coords.p_pointer - this.coords.p_from_fake), this.$cache.s_from.addClass("state_hover"), this.$cache.s_from.addClass("type_last"), this.$cache.s_to.removeClass("type_last");
            break;
          case "to":
            this.coords.p_gap = this.toFixed(this.coords.p_pointer - this.coords.p_to_fake), this.$cache.s_to.addClass("state_hover"), this.$cache.s_to.addClass("type_last"), this.$cache.s_from.removeClass("type_last");
            break;
          case "both":
            this.coords.p_gap_left = this.toFixed(this.coords.p_pointer - this.coords.p_from_fake), this.coords.p_gap_right = this.toFixed(this.coords.p_to_fake - this.coords.p_pointer), this.$cache.s_to.removeClass("type_last"), this.$cache.s_from.removeClass("type_last");
        }
      }, appendDisableMask: function() {
        this.$cache.cont.append('<span class="irs-disable-mask"></span>'), this.$cache.cont.addClass("irs-disabled");
      }, removeDisableMask: function() {
        this.$cache.cont.remove(".irs-disable-mask"), this.$cache.cont.removeClass("irs-disabled");
      }, remove: function() {
        this.$cache.cont.remove(), this.$cache.cont = null, this.$cache.line.off("keydown.irs_" + this.plugin_count), this.$cache.body.off("touchmove.irs_" + this.plugin_count), this.$cache.body.off("mousemove.irs_" + this.plugin_count), this.$cache.win.off("touchend.irs_" + this.plugin_count), this.$cache.win.off("mouseup.irs_" + this.plugin_count), e && (this.$cache.body.off("mouseup.irs_" + this.plugin_count), this.$cache.body.off("mouseleave.irs_" + this.plugin_count)), this.$cache.grid_labels = [], this.coords.big = [], this.coords.big_w = [], this.coords.big_p = [], this.coords.big_x = [], cancelAnimationFrame(this.raf_id);
      }, bindEvents: function() {
        this.no_diapason || (this.$cache.body.on("touchmove.irs_" + this.plugin_count, this.pointerMove.bind(this)), this.$cache.body.on("mousemove.irs_" + this.plugin_count, this.pointerMove.bind(this)), this.$cache.win.on("touchend.irs_" + this.plugin_count, this.pointerUp.bind(this)), this.$cache.win.on("mouseup.irs_" + this.plugin_count, this.pointerUp.bind(this)), this.$cache.line.on("touchstart.irs_" + this.plugin_count, this.pointerClick.bind(this, "click")), this.$cache.line.on("mousedown.irs_" + this.plugin_count, this.pointerClick.bind(this, "click")), this.$cache.line.on("focus.irs_" + this.plugin_count, this.pointerFocus.bind(this)), this.options.drag_interval && "double" === this.options.type ? (this.$cache.bar.on("touchstart.irs_" + this.plugin_count, this.pointerDown.bind(this, "both")), this.$cache.bar.on("mousedown.irs_" + this.plugin_count, this.pointerDown.bind(this, "both"))) : (this.$cache.bar.on("touchstart.irs_" + this.plugin_count, this.pointerClick.bind(this, "click")), this.$cache.bar.on("mousedown.irs_" + this.plugin_count, this.pointerClick.bind(this, "click"))), "single" === this.options.type ? (this.$cache.single.on("touchstart.irs_" + this.plugin_count, this.pointerDown.bind(this, "single")), this.$cache.s_single.on("touchstart.irs_" + this.plugin_count, this.pointerDown.bind(this, "single")), this.$cache.shad_single.on("touchstart.irs_" + this.plugin_count, this.pointerClick.bind(this, "click")), this.$cache.single.on("mousedown.irs_" + this.plugin_count, this.pointerDown.bind(this, "single")), this.$cache.s_single.on("mousedown.irs_" + this.plugin_count, this.pointerDown.bind(this, "single")), this.$cache.edge.on("mousedown.irs_" + this.plugin_count, this.pointerClick.bind(this, "click")), this.$cache.shad_single.on("mousedown.irs_" + this.plugin_count, this.pointerClick.bind(this, "click"))) : (this.$cache.single.on("touchstart.irs_" + this.plugin_count, this.pointerDown.bind(this, null)), this.$cache.single.on("mousedown.irs_" + this.plugin_count, this.pointerDown.bind(this, null)), this.$cache.from.on("touchstart.irs_" + this.plugin_count, this.pointerDown.bind(this, "from")), this.$cache.s_from.on("touchstart.irs_" + this.plugin_count, this.pointerDown.bind(this, "from")), this.$cache.to.on("touchstart.irs_" + this.plugin_count, this.pointerDown.bind(this, "to")), this.$cache.s_to.on("touchstart.irs_" + this.plugin_count, this.pointerDown.bind(this, "to")), this.$cache.shad_from.on("touchstart.irs_" + this.plugin_count, this.pointerClick.bind(this, "click")), this.$cache.shad_to.on("touchstart.irs_" + this.plugin_count, this.pointerClick.bind(this, "click")), this.$cache.from.on("mousedown.irs_" + this.plugin_count, this.pointerDown.bind(this, "from")), this.$cache.s_from.on("mousedown.irs_" + this.plugin_count, this.pointerDown.bind(this, "from")), this.$cache.to.on("mousedown.irs_" + this.plugin_count, this.pointerDown.bind(this, "to")), this.$cache.s_to.on("mousedown.irs_" + this.plugin_count, this.pointerDown.bind(this, "to")), this.$cache.shad_from.on("mousedown.irs_" + this.plugin_count, this.pointerClick.bind(this, "click")), this.$cache.shad_to.on("mousedown.irs_" + this.plugin_count, this.pointerClick.bind(this, "click"))), this.options.keyboard && this.$cache.line.on("keydown.irs_" + this.plugin_count, this.key.bind(this, "keyboard")), e && (this.$cache.body.on("mouseup.irs_" + this.plugin_count, this.pointerUp.bind(this)), this.$cache.body.on("mouseleave.irs_" + this.plugin_count, this.pointerUp.bind(this))));
      }, pointerFocus: function(t2) {
        var i2, s2;
        this.target || (i2 = (s2 = "single" === this.options.type ? this.$cache.single : this.$cache.from).offset().left, i2 += s2.width() / 2 - 1, this.pointerClick("single", { preventDefault: function() {
        }, pageX: i2 }));
      }, pointerMove: function(t2) {
        if (this.dragging) {
          var i2 = t2.pageX || t2.originalEvent.touches && t2.originalEvent.touches[0].pageX;
          this.coords.x_pointer = i2 - this.coords.x_gap, this.calc();
        }
      }, pointerUp: function(t2) {
        this.current_plugin === this.plugin_count && this.is_active && (this.is_active = false, this.$cache.cont.find(".state_hover").removeClass("state_hover"), this.force_redraw = true, e && a("*").prop("unselectable", false), this.updateScene(), this.restoreOriginalMinInterval(), (a.contains(this.$cache.cont[0], t2.target) || this.dragging) && this.callOnFinish(), this.dragging = false);
      }, pointerDown: function(t2, i2) {
        i2.preventDefault();
        var s2 = i2.pageX || i2.originalEvent.touches && i2.originalEvent.touches[0].pageX;
        2 !== i2.button && ("both" === t2 && this.setTempMinInterval(), t2 = t2 || (this.target || "from"), this.current_plugin = this.plugin_count, this.target = t2, this.is_active = true, this.dragging = true, this.coords.x_gap = this.$cache.rs.offset().left, this.coords.x_pointer = s2 - this.coords.x_gap, this.calcPointerPercent(), this.changeLevel(t2), e && a("*").prop("unselectable", true), this.$cache.line.trigger("focus"), this.updateScene());
      }, pointerClick: function(t2, i2) {
        i2.preventDefault();
        var s2 = i2.pageX || i2.originalEvent.touches && i2.originalEvent.touches[0].pageX;
        2 !== i2.button && (this.current_plugin = this.plugin_count, this.target = t2, this.is_click = true, this.coords.x_gap = this.$cache.rs.offset().left, this.coords.x_pointer = +(s2 - this.coords.x_gap).toFixed(), this.force_redraw = true, this.calc(), this.$cache.line.trigger("focus"));
      }, key: function(t2, i2) {
        if (!(this.current_plugin !== this.plugin_count || i2.altKey || i2.ctrlKey || i2.shiftKey || i2.metaKey)) {
          switch (i2.which) {
            case 83:
            case 65:
            case 40:
            case 37:
              i2.preventDefault(), this.moveByKey(false);
              break;
            case 87:
            case 68:
            case 38:
            case 39:
              i2.preventDefault(), this.moveByKey(true);
          }
          return true;
        }
      }, moveByKey: function(t2) {
        var i2 = this.coords.p_pointer, s2 = (this.options.max - this.options.min) / 100;
        s2 = this.options.step / s2, t2 ? i2 += s2 : i2 -= s2, this.coords.x_pointer = this.toFixed(this.coords.w_rs / 100 * i2), this.is_key = true, this.calc();
      }, setMinMax: function() {
        if (this.options) {
          if (this.options.hide_min_max)
            return this.$cache.min[0].style.display = "none", void (this.$cache.max[0].style.display = "none");
          if (this.options.values.length)
            this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])), this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]));
          else {
            var t2 = this._prettify(this.options.min), i2 = this._prettify(this.options.max);
            this.result.min_pretty = t2, this.result.max_pretty = i2, this.$cache.min.html(this.decorate(t2, this.options.min)), this.$cache.max.html(this.decorate(i2, this.options.max));
          }
          this.labels.w_min = this.$cache.min.outerWidth(false), this.labels.w_max = this.$cache.max.outerWidth(false);
        }
      }, setTempMinInterval: function() {
        var t2 = this.result.to - this.result.from;
        null === this.old_min_interval && (this.old_min_interval = this.options.min_interval), this.options.min_interval = t2;
      }, restoreOriginalMinInterval: function() {
        null !== this.old_min_interval && (this.options.min_interval = this.old_min_interval, this.old_min_interval = null);
      }, calc: function(t2) {
        if (this.options && (this.calc_count++, 10 !== this.calc_count && !t2 || (this.calc_count = 0, this.coords.w_rs = this.$cache.rs.outerWidth(false), this.calcHandlePercent()), this.coords.w_rs)) {
          this.calcPointerPercent();
          var i2 = this.getHandleX();
          switch ("both" === this.target && (this.coords.p_gap = 0, i2 = this.getHandleX()), "click" === this.target && (this.coords.p_gap = this.coords.p_handle / 2, i2 = this.getHandleX(), this.options.drag_interval ? this.target = "both_one" : this.target = this.chooseHandle(i2)), this.target) {
            case "base":
              var s2 = (this.options.max - this.options.min) / 100, o2 = (this.result.from - this.options.min) / s2, e2 = (this.result.to - this.options.min) / s2;
              this.coords.p_single_real = this.toFixed(o2), this.coords.p_from_real = this.toFixed(o2), this.coords.p_to_real = this.toFixed(e2), this.coords.p_single_real = this.checkDiapason(this.coords.p_single_real, this.options.from_min, this.options.from_max), this.coords.p_from_real = this.checkDiapason(this.coords.p_from_real, this.options.from_min, this.options.from_max), this.coords.p_to_real = this.checkDiapason(this.coords.p_to_real, this.options.to_min, this.options.to_max), this.coords.p_single_fake = this.convertToFakePercent(this.coords.p_single_real), this.coords.p_from_fake = this.convertToFakePercent(this.coords.p_from_real), this.coords.p_to_fake = this.convertToFakePercent(this.coords.p_to_real), this.target = null;
              break;
            case "single":
              if (this.options.from_fixed)
                break;
              this.coords.p_single_real = this.convertToRealPercent(i2), this.coords.p_single_real = this.calcWithStep(this.coords.p_single_real), this.coords.p_single_real = this.checkDiapason(this.coords.p_single_real, this.options.from_min, this.options.from_max), this.coords.p_single_fake = this.convertToFakePercent(this.coords.p_single_real);
              break;
            case "from":
              if (this.options.from_fixed)
                break;
              this.coords.p_from_real = this.convertToRealPercent(i2), this.coords.p_from_real = this.calcWithStep(this.coords.p_from_real), this.coords.p_from_real > this.coords.p_to_real && (this.coords.p_from_real = this.coords.p_to_real), this.coords.p_from_real = this.checkDiapason(this.coords.p_from_real, this.options.from_min, this.options.from_max), this.coords.p_from_real = this.checkMinInterval(this.coords.p_from_real, this.coords.p_to_real, "from"), this.coords.p_from_real = this.checkMaxInterval(this.coords.p_from_real, this.coords.p_to_real, "from"), this.coords.p_from_fake = this.convertToFakePercent(this.coords.p_from_real);
              break;
            case "to":
              if (this.options.to_fixed)
                break;
              this.coords.p_to_real = this.convertToRealPercent(i2), this.coords.p_to_real = this.calcWithStep(this.coords.p_to_real), this.coords.p_to_real < this.coords.p_from_real && (this.coords.p_to_real = this.coords.p_from_real), this.coords.p_to_real = this.checkDiapason(this.coords.p_to_real, this.options.to_min, this.options.to_max), this.coords.p_to_real = this.checkMinInterval(this.coords.p_to_real, this.coords.p_from_real, "to"), this.coords.p_to_real = this.checkMaxInterval(this.coords.p_to_real, this.coords.p_from_real, "to"), this.coords.p_to_fake = this.convertToFakePercent(this.coords.p_to_real);
              break;
            case "both":
              if (this.options.from_fixed || this.options.to_fixed)
                break;
              i2 = this.toFixed(i2 + 1e-3 * this.coords.p_handle), this.coords.p_from_real = this.convertToRealPercent(i2) - this.coords.p_gap_left, this.coords.p_from_real = this.calcWithStep(this.coords.p_from_real), this.coords.p_from_real = this.checkDiapason(this.coords.p_from_real, this.options.from_min, this.options.from_max), this.coords.p_from_real = this.checkMinInterval(this.coords.p_from_real, this.coords.p_to_real, "from"), this.coords.p_from_fake = this.convertToFakePercent(this.coords.p_from_real), this.coords.p_to_real = this.convertToRealPercent(i2) + this.coords.p_gap_right, this.coords.p_to_real = this.calcWithStep(this.coords.p_to_real), this.coords.p_to_real = this.checkDiapason(this.coords.p_to_real, this.options.to_min, this.options.to_max), this.coords.p_to_real = this.checkMinInterval(this.coords.p_to_real, this.coords.p_from_real, "to"), this.coords.p_to_fake = this.convertToFakePercent(this.coords.p_to_real);
              break;
            case "both_one":
              if (this.options.from_fixed || this.options.to_fixed)
                break;
              var h2 = this.convertToRealPercent(i2), r = this.result.from_percent, n = this.result.to_percent - r, a2 = n / 2, c2 = h2 - a2, l2 = h2 + a2;
              c2 < 0 && (l2 = (c2 = 0) + n), 100 < l2 && (c2 = (l2 = 100) - n), this.coords.p_from_real = this.calcWithStep(c2), this.coords.p_from_real = this.checkDiapason(this.coords.p_from_real, this.options.from_min, this.options.from_max), this.coords.p_from_fake = this.convertToFakePercent(this.coords.p_from_real), this.coords.p_to_real = this.calcWithStep(l2), this.coords.p_to_real = this.checkDiapason(this.coords.p_to_real, this.options.to_min, this.options.to_max), this.coords.p_to_fake = this.convertToFakePercent(this.coords.p_to_real);
          }
          "single" === this.options.type ? (this.coords.p_bar_x = this.coords.p_handle / 2, this.coords.p_bar_w = this.coords.p_single_fake, this.result.from_percent = this.coords.p_single_real, this.result.from = this.convertToValue(this.coords.p_single_real), this.result.from_pretty = this._prettify(this.result.from), this.options.values.length && (this.result.from_value = this.options.values[this.result.from])) : (this.coords.p_bar_x = this.toFixed(this.coords.p_from_fake + this.coords.p_handle / 2), this.coords.p_bar_w = this.toFixed(this.coords.p_to_fake - this.coords.p_from_fake), this.result.from_percent = this.coords.p_from_real, this.result.from = this.convertToValue(this.coords.p_from_real), this.result.from_pretty = this._prettify(this.result.from), this.result.to_percent = this.coords.p_to_real, this.result.to = this.convertToValue(this.coords.p_to_real), this.result.to_pretty = this._prettify(this.result.to), this.options.values.length && (this.result.from_value = this.options.values[this.result.from], this.result.to_value = this.options.values[this.result.to])), this.calcMinMax(), this.calcLabels();
        }
      }, calcPointerPercent: function() {
        this.coords.w_rs ? (this.coords.x_pointer < 0 || isNaN(this.coords.x_pointer) ? this.coords.x_pointer = 0 : this.coords.x_pointer > this.coords.w_rs && (this.coords.x_pointer = this.coords.w_rs), this.coords.p_pointer = this.toFixed(this.coords.x_pointer / this.coords.w_rs * 100)) : this.coords.p_pointer = 0;
      }, convertToRealPercent: function(t2) {
        return t2 / (100 - this.coords.p_handle) * 100;
      }, convertToFakePercent: function(t2) {
        return t2 / 100 * (100 - this.coords.p_handle);
      }, getHandleX: function() {
        var t2 = 100 - this.coords.p_handle, i2 = this.toFixed(this.coords.p_pointer - this.coords.p_gap);
        return i2 < 0 ? i2 = 0 : t2 < i2 && (i2 = t2), i2;
      }, calcHandlePercent: function() {
        "single" === this.options.type ? this.coords.w_handle = this.$cache.s_single.outerWidth(false) : this.coords.w_handle = this.$cache.s_from.outerWidth(false), this.coords.p_handle = this.toFixed(this.coords.w_handle / this.coords.w_rs * 100);
      }, chooseHandle: function(t2) {
        return "single" === this.options.type ? "single" : this.coords.p_from_real + (this.coords.p_to_real - this.coords.p_from_real) / 2 <= t2 ? this.options.to_fixed ? "from" : "to" : this.options.from_fixed ? "to" : "from";
      }, calcMinMax: function() {
        this.coords.w_rs && (this.labels.p_min = this.labels.w_min / this.coords.w_rs * 100, this.labels.p_max = this.labels.w_max / this.coords.w_rs * 100);
      }, calcLabels: function() {
        this.coords.w_rs && !this.options.hide_from_to && ("single" === this.options.type ? (this.labels.w_single = this.$cache.single.outerWidth(false), this.labels.p_single_fake = this.labels.w_single / this.coords.w_rs * 100, this.labels.p_single_left = this.coords.p_single_fake + this.coords.p_handle / 2 - this.labels.p_single_fake / 2) : (this.labels.w_from = this.$cache.from.outerWidth(false), this.labels.p_from_fake = this.labels.w_from / this.coords.w_rs * 100, this.labels.p_from_left = this.coords.p_from_fake + this.coords.p_handle / 2 - this.labels.p_from_fake / 2, this.labels.p_from_left = this.toFixed(this.labels.p_from_left), this.labels.p_from_left = this.checkEdges(this.labels.p_from_left, this.labels.p_from_fake), this.labels.w_to = this.$cache.to.outerWidth(false), this.labels.p_to_fake = this.labels.w_to / this.coords.w_rs * 100, this.labels.p_to_left = this.coords.p_to_fake + this.coords.p_handle / 2 - this.labels.p_to_fake / 2, this.labels.p_to_left = this.toFixed(this.labels.p_to_left), this.labels.p_to_left = this.checkEdges(this.labels.p_to_left, this.labels.p_to_fake), this.labels.w_single = this.$cache.single.outerWidth(false), this.labels.p_single_fake = this.labels.w_single / this.coords.w_rs * 100, this.labels.p_single_left = (this.labels.p_from_left + this.labels.p_to_left + this.labels.p_to_fake) / 2 - this.labels.p_single_fake / 2, this.labels.p_single_left = this.toFixed(this.labels.p_single_left)), this.labels.p_single_left = this.checkEdges(this.labels.p_single_left, this.labels.p_single_fake));
      }, updateScene: function() {
        this.raf_id && (cancelAnimationFrame(this.raf_id), this.raf_id = null), clearTimeout(this.update_tm), this.update_tm = null, this.options && (this.drawHandles(), this.is_active ? this.raf_id = requestAnimationFrame(this.updateScene.bind(this)) : this.update_tm = setTimeout(this.updateScene.bind(this), 300));
      }, drawHandles: function() {
        this.coords.w_rs = this.$cache.rs.outerWidth(false), this.coords.w_rs && (this.coords.w_rs !== this.coords.w_rs_old && (this.target = "base", this.is_resize = true), this.coords.w_rs === this.coords.w_rs_old && !this.force_redraw || (this.setMinMax(), this.calc(true), this.drawLabels(), this.options.grid && (this.calcGridMargin(), this.calcGridLabels()), this.force_redraw = true, this.coords.w_rs_old = this.coords.w_rs, this.drawShadow()), this.coords.w_rs && (this.dragging || this.force_redraw || this.is_key) && ((this.old_from !== this.result.from || this.old_to !== this.result.to || this.force_redraw || this.is_key) && (this.drawLabels(), this.$cache.bar[0].style.left = this.coords.p_bar_x + "%", this.$cache.bar[0].style.width = this.coords.p_bar_w + "%", "single" === this.options.type ? (this.$cache.bar[0].style.left = 0, this.$cache.bar[0].style.width = this.coords.p_bar_w + this.coords.p_bar_x + "%", this.$cache.s_single[0].style.left = this.coords.p_single_fake + "%") : (this.$cache.s_from[0].style.left = this.coords.p_from_fake + "%", this.$cache.s_to[0].style.left = this.coords.p_to_fake + "%", this.old_from === this.result.from && !this.force_redraw || (this.$cache.from[0].style.left = this.labels.p_from_left + "%"), this.old_to === this.result.to && !this.force_redraw || (this.$cache.to[0].style.left = this.labels.p_to_left + "%")), this.$cache.single[0].style.left = this.labels.p_single_left + "%", this.writeToInput(), this.old_from === this.result.from && this.old_to === this.result.to || this.is_start || (this.$cache.input.trigger("change"), this.$cache.input.trigger("input")), this.old_from = this.result.from, this.old_to = this.result.to, this.is_resize || this.is_update || this.is_start || this.is_finish || this.callOnChange(), (this.is_key || this.is_click) && (this.is_key = false, this.is_click = false, this.callOnFinish()), this.is_update = false, this.is_resize = false, this.is_finish = false), this.is_start = false, this.is_key = false, this.is_click = false, this.force_redraw = false));
      }, drawLabels: function() {
        if (this.options) {
          var t2, i2, s2, o2, e2, h2 = this.options.values.length, r = this.options.p_values;
          if (!this.options.hide_from_to)
            if ("single" === this.options.type)
              t2 = h2 ? this.decorate(r[this.result.from]) : (o2 = this._prettify(this.result.from), this.decorate(o2, this.result.from)), this.$cache.single.html(t2), this.calcLabels(), this.labels.p_single_left < this.labels.p_min + 1 ? this.$cache.min[0].style.visibility = "hidden" : this.$cache.min[0].style.visibility = "visible", this.labels.p_single_left + this.labels.p_single_fake > 100 - this.labels.p_max - 1 ? this.$cache.max[0].style.visibility = "hidden" : this.$cache.max[0].style.visibility = "visible";
            else {
              s2 = h2 ? (this.options.decorate_both ? (t2 = this.decorate(r[this.result.from]), t2 += this.options.values_separator, t2 += this.decorate(r[this.result.to])) : t2 = this.decorate(r[this.result.from] + this.options.values_separator + r[this.result.to]), i2 = this.decorate(r[this.result.from]), this.decorate(r[this.result.to])) : (o2 = this._prettify(this.result.from), e2 = this._prettify(this.result.to), this.options.decorate_both ? (t2 = this.decorate(o2, this.result.from), t2 += this.options.values_separator, t2 += this.decorate(e2, this.result.to)) : t2 = this.decorate(o2 + this.options.values_separator + e2, this.result.to), i2 = this.decorate(o2, this.result.from), this.decorate(e2, this.result.to)), this.$cache.single.html(t2), this.$cache.from.html(i2), this.$cache.to.html(s2), this.calcLabels();
              var n = Math.min(this.labels.p_single_left, this.labels.p_from_left), a2 = this.labels.p_single_left + this.labels.p_single_fake, c2 = this.labels.p_to_left + this.labels.p_to_fake, l2 = Math.max(a2, c2);
              this.labels.p_from_left + this.labels.p_from_fake >= this.labels.p_to_left ? (this.$cache.from[0].style.visibility = "hidden", this.$cache.to[0].style.visibility = "hidden", this.$cache.single[0].style.visibility = "visible", l2 = this.result.from === this.result.to ? ("from" === this.target ? this.$cache.from[0].style.visibility = "visible" : "to" === this.target ? this.$cache.to[0].style.visibility = "visible" : this.target || (this.$cache.from[0].style.visibility = "visible"), this.$cache.single[0].style.visibility = "hidden", c2) : (this.$cache.from[0].style.visibility = "hidden", this.$cache.to[0].style.visibility = "hidden", this.$cache.single[0].style.visibility = "visible", Math.max(a2, c2))) : (this.$cache.from[0].style.visibility = "visible", this.$cache.to[0].style.visibility = "visible", this.$cache.single[0].style.visibility = "hidden"), n < this.labels.p_min + 1 ? this.$cache.min[0].style.visibility = "hidden" : this.$cache.min[0].style.visibility = "visible", l2 > 100 - this.labels.p_max - 1 ? this.$cache.max[0].style.visibility = "hidden" : this.$cache.max[0].style.visibility = "visible";
            }
        }
      }, drawShadow: function() {
        var t2, i2, s2, o2, e2 = this.options, h2 = this.$cache, r = "number" == typeof e2.from_min && !isNaN(e2.from_min), n = "number" == typeof e2.from_max && !isNaN(e2.from_max), a2 = "number" == typeof e2.to_min && !isNaN(e2.to_min), c2 = "number" == typeof e2.to_max && !isNaN(e2.to_max);
        "single" === e2.type ? e2.from_shadow && (r || n) ? (t2 = this.convertToPercent(r ? e2.from_min : e2.min), i2 = this.convertToPercent(n ? e2.from_max : e2.max) - t2, t2 = this.toFixed(t2 - this.coords.p_handle / 100 * t2), i2 = this.toFixed(i2 - this.coords.p_handle / 100 * i2), t2 += this.coords.p_handle / 2, h2.shad_single[0].style.display = "block", h2.shad_single[0].style.left = t2 + "%", h2.shad_single[0].style.width = i2 + "%") : h2.shad_single[0].style.display = "none" : (e2.from_shadow && (r || n) ? (t2 = this.convertToPercent(r ? e2.from_min : e2.min), i2 = this.convertToPercent(n ? e2.from_max : e2.max) - t2, t2 = this.toFixed(t2 - this.coords.p_handle / 100 * t2), i2 = this.toFixed(i2 - this.coords.p_handle / 100 * i2), t2 += this.coords.p_handle / 2, h2.shad_from[0].style.display = "block", h2.shad_from[0].style.left = t2 + "%", h2.shad_from[0].style.width = i2 + "%") : h2.shad_from[0].style.display = "none", e2.to_shadow && (a2 || c2) ? (s2 = this.convertToPercent(a2 ? e2.to_min : e2.min), o2 = this.convertToPercent(c2 ? e2.to_max : e2.max) - s2, s2 = this.toFixed(s2 - this.coords.p_handle / 100 * s2), o2 = this.toFixed(o2 - this.coords.p_handle / 100 * o2), s2 += this.coords.p_handle / 2, h2.shad_to[0].style.display = "block", h2.shad_to[0].style.left = s2 + "%", h2.shad_to[0].style.width = o2 + "%") : h2.shad_to[0].style.display = "none");
      }, writeToInput: function() {
        "single" === this.options.type ? (this.options.values.length ? this.$cache.input.prop("value", this.result.from_value) : this.$cache.input.prop("value", this.result.from), this.$cache.input.data("from", this.result.from)) : (this.options.values.length ? this.$cache.input.prop("value", this.result.from_value + this.options.input_values_separator + this.result.to_value) : this.$cache.input.prop("value", this.result.from + this.options.input_values_separator + this.result.to), this.$cache.input.data("from", this.result.from), this.$cache.input.data("to", this.result.to));
      }, callOnStart: function() {
        this.writeToInput(), this.options.onStart && "function" == typeof this.options.onStart && (this.options.scope ? this.options.onStart.call(this.options.scope, this.result) : this.options.onStart(this.result));
      }, callOnChange: function() {
        this.writeToInput(), this.options.onChange && "function" == typeof this.options.onChange && (this.options.scope ? this.options.onChange.call(this.options.scope, this.result) : this.options.onChange(this.result));
      }, callOnFinish: function() {
        this.writeToInput(), this.options.onFinish && "function" == typeof this.options.onFinish && (this.options.scope ? this.options.onFinish.call(this.options.scope, this.result) : this.options.onFinish(this.result));
      }, callOnUpdate: function() {
        this.writeToInput(), this.options.onUpdate && "function" == typeof this.options.onUpdate && (this.options.scope ? this.options.onUpdate.call(this.options.scope, this.result) : this.options.onUpdate(this.result));
      }, toggleInput: function() {
        this.$cache.input.toggleClass("irs-hidden-input"), this.has_tab_index ? this.$cache.input.prop("tabindex", -1) : this.$cache.input.removeProp("tabindex"), this.has_tab_index = !this.has_tab_index;
      }, convertToPercent: function(t2, i2) {
        var s2, o2 = this.options.max - this.options.min, e2 = o2 / 100;
        return o2 ? (s2 = (i2 ? t2 : t2 - this.options.min) / e2, this.toFixed(s2)) : (this.no_diapason = true, 0);
      }, convertToValue: function(t2) {
        var i2, s2, o2 = this.options.min, e2 = this.options.max, h2 = o2.toString().split(".")[1], r = e2.toString().split(".")[1], n = 0, a2 = 0;
        if (0 === t2)
          return this.options.min;
        if (100 === t2)
          return this.options.max;
        h2 && (n = i2 = h2.length), r && (n = s2 = r.length), i2 && s2 && (n = s2 <= i2 ? i2 : s2), o2 < 0 && (o2 = +(o2 + (a2 = Math.abs(o2))).toFixed(n), e2 = +(e2 + a2).toFixed(n));
        var c2, l2 = (e2 - o2) / 100 * t2 + o2, _2 = this.options.step.toString().split(".")[1];
        return l2 = _2 ? +l2.toFixed(_2.length) : (l2 /= this.options.step, +(l2 *= this.options.step).toFixed(0)), a2 && (l2 -= a2), (c2 = _2 ? +l2.toFixed(_2.length) : this.toFixed(l2)) < this.options.min ? c2 = this.options.min : c2 > this.options.max && (c2 = this.options.max), c2;
      }, calcWithStep: function(t2) {
        var i2 = Math.round(t2 / this.coords.p_step) * this.coords.p_step;
        return 100 < i2 && (i2 = 100), 100 === t2 && (i2 = 100), this.toFixed(i2);
      }, checkMinInterval: function(t2, i2, s2) {
        var o2, e2, h2 = this.options;
        return h2.min_interval ? (o2 = this.convertToValue(t2), e2 = this.convertToValue(i2), "from" === s2 ? e2 - o2 < h2.min_interval && (o2 = e2 - h2.min_interval) : o2 - e2 < h2.min_interval && (o2 = e2 + h2.min_interval), this.convertToPercent(o2)) : t2;
      }, checkMaxInterval: function(t2, i2, s2) {
        var o2, e2, h2 = this.options;
        return h2.max_interval ? (o2 = this.convertToValue(t2), e2 = this.convertToValue(i2), "from" === s2 ? e2 - o2 > h2.max_interval && (o2 = e2 - h2.max_interval) : o2 - e2 > h2.max_interval && (o2 = e2 + h2.max_interval), this.convertToPercent(o2)) : t2;
      }, checkDiapason: function(t2, i2, s2) {
        var o2 = this.convertToValue(t2), e2 = this.options;
        return "number" != typeof i2 && (i2 = e2.min), "number" != typeof s2 && (s2 = e2.max), o2 < i2 && (o2 = i2), s2 < o2 && (o2 = s2), this.convertToPercent(o2);
      }, toFixed: function(t2) {
        return +(t2 = t2.toFixed(20));
      }, _prettify: function(t2) {
        return this.options.prettify_enabled ? this.options.prettify && "function" == typeof this.options.prettify ? this.options.prettify(t2) : this.prettify(t2) : t2;
      }, prettify: function(t2) {
        return t2.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g, "$1" + this.options.prettify_separator);
      }, checkEdges: function(t2, i2) {
        return this.options.force_edges && (t2 < 0 ? t2 = 0 : 100 - i2 < t2 && (t2 = 100 - i2)), this.toFixed(t2);
      }, validate: function() {
        var t2, i2, s2 = this.options, o2 = this.result, e2 = s2.values, h2 = e2.length;
        if ("string" == typeof s2.min && (s2.min = +s2.min), "string" == typeof s2.max && (s2.max = +s2.max), "string" == typeof s2.from && (s2.from = +s2.from), "string" == typeof s2.to && (s2.to = +s2.to), "string" == typeof s2.step && (s2.step = +s2.step), "string" == typeof s2.from_min && (s2.from_min = +s2.from_min), "string" == typeof s2.from_max && (s2.from_max = +s2.from_max), "string" == typeof s2.to_min && (s2.to_min = +s2.to_min), "string" == typeof s2.to_max && (s2.to_max = +s2.to_max), "string" == typeof s2.grid_num && (s2.grid_num = +s2.grid_num), s2.max < s2.min && (s2.max = s2.min), h2)
          for (s2.p_values = [], s2.min = 0, s2.max = h2 - 1, s2.step = 1, s2.grid_num = s2.max, s2.grid_snap = true, i2 = 0; i2 < h2; i2++)
            t2 = +e2[i2], t2 = isNaN(t2) ? e2[i2] : (e2[i2] = t2, this._prettify(t2)), s2.p_values.push(t2);
        "number" == typeof s2.from && !isNaN(s2.from) || (s2.from = s2.min), "number" == typeof s2.to && !isNaN(s2.to) || (s2.to = s2.max), "single" === s2.type ? (s2.from < s2.min && (s2.from = s2.min), s2.from > s2.max && (s2.from = s2.max)) : (s2.from < s2.min && (s2.from = s2.min), s2.from > s2.max && (s2.from = s2.max), s2.to < s2.min && (s2.to = s2.min), s2.to > s2.max && (s2.to = s2.max), this.update_check.from && (this.update_check.from !== s2.from && s2.from > s2.to && (s2.from = s2.to), this.update_check.to !== s2.to && s2.to < s2.from && (s2.to = s2.from)), s2.from > s2.to && (s2.from = s2.to), s2.to < s2.from && (s2.to = s2.from)), ("number" != typeof s2.step || isNaN(s2.step) || !s2.step || s2.step < 0) && (s2.step = 1), "number" == typeof s2.from_min && s2.from < s2.from_min && (s2.from = s2.from_min), "number" == typeof s2.from_max && s2.from > s2.from_max && (s2.from = s2.from_max), "number" == typeof s2.to_min && s2.to < s2.to_min && (s2.to = s2.to_min), "number" == typeof s2.to_max && s2.from > s2.to_max && (s2.to = s2.to_max), o2 && (o2.min !== s2.min && (o2.min = s2.min), o2.max !== s2.max && (o2.max = s2.max), (o2.from < o2.min || o2.from > o2.max) && (o2.from = s2.from), (o2.to < o2.min || o2.to > o2.max) && (o2.to = s2.to)), ("number" != typeof s2.min_interval || isNaN(s2.min_interval) || !s2.min_interval || s2.min_interval < 0) && (s2.min_interval = 0), ("number" != typeof s2.max_interval || isNaN(s2.max_interval) || !s2.max_interval || s2.max_interval < 0) && (s2.max_interval = 0), s2.min_interval && s2.min_interval > s2.max - s2.min && (s2.min_interval = s2.max - s2.min), s2.max_interval && s2.max_interval > s2.max - s2.min && (s2.max_interval = s2.max - s2.min);
      }, decorate: function(t2, i2) {
        var s2 = "", o2 = this.options;
        return o2.prefix && (s2 += o2.prefix), s2 += t2, o2.max_postfix && (o2.values.length && t2 === o2.p_values[o2.max] ? (s2 += o2.max_postfix, o2.postfix && (s2 += " ")) : i2 === o2.max && (s2 += o2.max_postfix, o2.postfix && (s2 += " "))), o2.postfix && (s2 += o2.postfix), s2;
      }, updateFrom: function() {
        this.result.from = this.options.from, this.result.from_percent = this.convertToPercent(this.result.from), this.result.from_pretty = this._prettify(this.result.from), this.options.values && (this.result.from_value = this.options.values[this.result.from]);
      }, updateTo: function() {
        this.result.to = this.options.to, this.result.to_percent = this.convertToPercent(this.result.to), this.result.to_pretty = this._prettify(this.result.to), this.options.values && (this.result.to_value = this.options.values[this.result.to]);
      }, updateResult: function() {
        this.result.min = this.options.min, this.result.max = this.options.max, this.updateFrom(), this.updateTo();
      }, appendGrid: function() {
        if (this.options.grid) {
          var t2, i2, s2, o2, e2, h2, r = this.options, n = r.max - r.min, a2 = r.grid_num, c2 = 0, l2 = 4, _2 = "";
          for (this.calcGridMargin(), r.grid_snap && (a2 = n / r.step), 50 < a2 && (a2 = 50), s2 = this.toFixed(100 / a2), 4 < a2 && (l2 = 3), 7 < a2 && (l2 = 2), 14 < a2 && (l2 = 1), 28 < a2 && (l2 = 0), t2 = 0; t2 < a2 + 1; t2++) {
            for (o2 = l2, 100 < (c2 = this.toFixed(s2 * t2)) && (c2 = 100), e2 = ((this.coords.big[t2] = c2) - s2 * (t2 - 1)) / (o2 + 1), i2 = 1; i2 <= o2 && 0 !== c2; i2++)
              _2 += '<span class="irs-grid-pol small" style="left: ' + this.toFixed(c2 - e2 * i2) + '%"></span>';
            _2 += '<span class="irs-grid-pol" style="left: ' + c2 + '%"></span>', h2 = this.convertToValue(c2), _2 += '<span class="irs-grid-text js-grid-text-' + t2 + '" style="left: ' + c2 + '%">' + (h2 = r.values.length ? r.p_values[h2] : this._prettify(h2)) + "</span>";
          }
          this.coords.big_num = Math.ceil(a2 + 1), this.$cache.cont.addClass("irs-with-grid"), this.$cache.grid.html(_2), this.cacheGridLabels();
        }
      }, cacheGridLabels: function() {
        var t2, i2, s2 = this.coords.big_num;
        for (i2 = 0; i2 < s2; i2++)
          t2 = this.$cache.grid.find(".js-grid-text-" + i2), this.$cache.grid_labels.push(t2);
        this.calcGridLabels();
      }, calcGridLabels: function() {
        var t2, i2, s2 = [], o2 = [], e2 = this.coords.big_num;
        for (t2 = 0; t2 < e2; t2++)
          this.coords.big_w[t2] = this.$cache.grid_labels[t2].outerWidth(false), this.coords.big_p[t2] = this.toFixed(this.coords.big_w[t2] / this.coords.w_rs * 100), this.coords.big_x[t2] = this.toFixed(this.coords.big_p[t2] / 2), s2[t2] = this.toFixed(this.coords.big[t2] - this.coords.big_x[t2]), o2[t2] = this.toFixed(s2[t2] + this.coords.big_p[t2]);
        for (this.options.force_edges && (s2[0] < -this.coords.grid_gap && (s2[0] = -this.coords.grid_gap, o2[0] = this.toFixed(s2[0] + this.coords.big_p[0]), this.coords.big_x[0] = this.coords.grid_gap), o2[e2 - 1] > 100 + this.coords.grid_gap && (o2[e2 - 1] = 100 + this.coords.grid_gap, s2[e2 - 1] = this.toFixed(o2[e2 - 1] - this.coords.big_p[e2 - 1]), this.coords.big_x[e2 - 1] = this.toFixed(this.coords.big_p[e2 - 1] - this.coords.grid_gap))), this.calcGridCollision(2, s2, o2), this.calcGridCollision(4, s2, o2), t2 = 0; t2 < e2; t2++)
          i2 = this.$cache.grid_labels[t2][0], this.coords.big_x[t2] !== Number.POSITIVE_INFINITY && (i2.style.marginLeft = -this.coords.big_x[t2] + "%");
      }, calcGridCollision: function(t2, i2, s2) {
        var o2, e2, h2, r = this.coords.big_num;
        for (o2 = 0; o2 < r && !(r <= (e2 = o2 + t2 / 2)); o2 += t2)
          h2 = this.$cache.grid_labels[e2][0], s2[o2] <= i2[e2] ? h2.style.visibility = "visible" : h2.style.visibility = "hidden";
      }, calcGridMargin: function() {
        this.options.grid_margin && (this.coords.w_rs = this.$cache.rs.outerWidth(false), this.coords.w_rs && ("single" === this.options.type ? this.coords.w_handle = this.$cache.s_single.outerWidth(false) : this.coords.w_handle = this.$cache.s_from.outerWidth(false), this.coords.p_handle = this.toFixed(this.coords.w_handle / this.coords.w_rs * 100), this.coords.grid_gap = this.toFixed(this.coords.p_handle / 2 - 0.1), this.$cache.grid[0].style.width = this.toFixed(100 - this.coords.p_handle) + "%", this.$cache.grid[0].style.left = this.coords.grid_gap + "%"));
      }, update: function(t2) {
        this.input && (this.is_update = true, this.options.from = this.result.from, this.options.to = this.result.to, this.update_check.from = this.result.from, this.update_check.to = this.result.to, this.options = a.extend(this.options, t2), this.validate(), this.updateResult(t2), this.toggleInput(), this.remove(), this.init(true));
      }, reset: function() {
        this.input && (this.updateResult(), this.update());
      }, destroy: function() {
        this.input && (this.toggleInput(), this.$cache.input.prop("readonly", false), a.data(this.input, "ionRangeSlider", null), this.remove(), this.input = null, this.options = null);
      } }, a.fn.ionRangeSlider = function(t2) {
        return this.each(function() {
          a.data(this, "ionRangeSlider") || a.data(this, "ionRangeSlider", new h(this, t2, o++));
        });
      }, function() {
        for (var h2 = 0, t2 = ["ms", "moz", "webkit", "o"], i2 = 0; i2 < t2.length && !l.requestAnimationFrame; ++i2)
          l.requestAnimationFrame = l[t2[i2] + "RequestAnimationFrame"], l.cancelAnimationFrame = l[t2[i2] + "CancelAnimationFrame"] || l[t2[i2] + "CancelRequestAnimationFrame"];
        l.requestAnimationFrame || (l.requestAnimationFrame = function(t3, i3) {
          var s2 = (/* @__PURE__ */ new Date()).getTime(), o2 = Math.max(0, 16 - (s2 - h2)), e2 = l.setTimeout(function() {
            t3(s2 + o2);
          }, o2);
          return h2 = s2 + o2, e2;
        }), l.cancelAnimationFrame || (l.cancelAnimationFrame = function(t3) {
          clearTimeout(t3);
        });
      }();
    });
  }
});
export default require_ion_rangeSlider_min();
//# sourceMappingURL=ion-rangeslider_js_ion__rangeSlider__min__js.js.map
